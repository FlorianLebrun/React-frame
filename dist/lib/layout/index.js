"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applicationLayout = exports.PluginInstance = exports.WindowID = exports.WindowContainer = exports.WindowComponent = exports.WindowInstance = undefined;
exports.configureLayout = configureLayout;
exports.installPlugin = installPlugin;
exports.dettachWindow = dettachWindow;
exports.removeWindow = removeWindow;
exports.getWindowHandle = getWindowHandle;

var _Window = require("./Window");

var _Plugin = require("./Plugin");

var _Layout = require("./Layout");

_Plugin.PluginInstance.prototype.layout = _Layout.applicationLayout;
_Window.WindowInstance.prototype.layout = _Layout.applicationLayout;

exports.WindowInstance = _Window.WindowInstance;
exports.WindowComponent = _Window.WindowComponent;
exports.WindowContainer = _Window.WindowContainer;
exports.WindowID = _Window.WindowID;
exports.PluginInstance = _Plugin.PluginInstance;
exports.applicationLayout = _Layout.applicationLayout;
function configureLayout(description) {
  _Layout.applicationLayout.splashComponent = description.splashComponent;
  _Layout.applicationLayout.displayLayout = description.displayLayout;
  return this;
}

function installPlugin(description) {
  // eslint-disable-line
  return _Layout.applicationLayout.installPlugin.apply(_Layout.applicationLayout, arguments);
}

function dettachWindow(windowId) {
  _Layout.applicationLayout.frame && _Layout.applicationLayout.frame.dettachWindow(windowId);
}

function removeWindow(windowId) {
  dettachWindow(windowId);
  delete _Layout.applicationLayout.windows[windowId];
}

function getWindowHandle(windowId) {
  // eslint-disable-line
  return _Layout.applicationLayout.getWindowInstance.apply(_Layout.applicationLayout, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BcHBsaWNhdGlvbi9sYXlvdXQvaW5kZXguanMiXSwibmFtZXMiOlsiY29uZmlndXJlTGF5b3V0IiwiaW5zdGFsbFBsdWdpbiIsImRldHRhY2hXaW5kb3ciLCJyZW1vdmVXaW5kb3ciLCJnZXRXaW5kb3dIYW5kbGUiLCJwcm90b3R5cGUiLCJsYXlvdXQiLCJXaW5kb3dJbnN0YW5jZSIsIldpbmRvd0NvbXBvbmVudCIsIldpbmRvd0NvbnRhaW5lciIsIldpbmRvd0lEIiwiUGx1Z2luSW5zdGFuY2UiLCJhcHBsaWNhdGlvbkxheW91dCIsImRlc2NyaXB0aW9uIiwic3BsYXNoQ29tcG9uZW50IiwiZGlzcGxheUxheW91dCIsImFwcGx5IiwiYXJndW1lbnRzIiwid2luZG93SWQiLCJmcmFtZSIsIndpbmRvd3MiLCJnZXRXaW5kb3dJbnN0YW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O1FBZ0JnQkEsZSxHQUFBQSxlO1FBTUFDLGEsR0FBQUEsYTtRQUlBQyxhLEdBQUFBLGE7UUFJQUMsWSxHQUFBQSxZO1FBS0FDLGUsR0FBQUEsZTs7QUFuQ2hCOztBQUNBOztBQUNBOztBQUVBLHVCQUFlQyxTQUFmLENBQXlCQyxNQUF6QjtBQUNBLHVCQUFlRCxTQUFmLENBQXlCQyxNQUF6Qjs7UUFHRUMsYztRQUNBQyxlO1FBQ0FDLGU7UUFDQUMsUTtRQUNBQyxjO1FBQ0FDLGlCO0FBR0ssU0FBU1osZUFBVCxDQUF5QmEsV0FBekIsRUFBMkQ7QUFDaEUsNEJBQWtCQyxlQUFsQixHQUFvQ0QsWUFBWUMsZUFBaEQ7QUFDQSw0QkFBa0JDLGFBQWxCLEdBQWtDRixZQUFZRSxhQUE5QztBQUNBLFNBQU8sSUFBUDtBQUNEOztBQUVNLFNBQVNkLGFBQVQsQ0FBdUJZLFdBQXZCLEVBQXlEO0FBQUU7QUFDaEUsU0FBTywwQkFBa0JaLGFBQWxCLENBQWdDZSxLQUFoQyw0QkFBeURDLFNBQXpELENBQVA7QUFDRDs7QUFFTSxTQUFTZixhQUFULENBQXVCZ0IsUUFBdkIsRUFBMkM7QUFDaEQsNEJBQWtCQyxLQUFsQixJQUEyQiwwQkFBa0JBLEtBQWxCLENBQXdCakIsYUFBeEIsQ0FBc0NnQixRQUF0QyxDQUEzQjtBQUNEOztBQUVNLFNBQVNmLFlBQVQsQ0FBc0JlLFFBQXRCLEVBQTBDO0FBQy9DaEIsZ0JBQWNnQixRQUFkO0FBQ0EsU0FBTywwQkFBa0JFLE9BQWxCLENBQTBCRixRQUExQixDQUFQO0FBQ0Q7O0FBRU0sU0FBU2QsZUFBVCxDQUF5QmMsUUFBekIsRUFBNkQ7QUFBRTtBQUNwRSxTQUFPLDBCQUFrQkcsaUJBQWxCLENBQW9DTCxLQUFwQyw0QkFBNkRDLFNBQTdELENBQVA7QUFDRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdpbmRvd0luc3RhbmNlLCBXaW5kb3dDb21wb25lbnQsIFdpbmRvd0NvbnRhaW5lciwgV2luZG93SUQgfSBmcm9tIFwiLi9XaW5kb3dcIlxyXG5pbXBvcnQgeyBQbHVnaW5JbnN0YW5jZSwgUGx1Z2luQ2xhc3MgfSBmcm9tIFwiLi9QbHVnaW5cIlxyXG5pbXBvcnQgeyBhcHBsaWNhdGlvbkxheW91dCB9IGZyb20gXCIuL0xheW91dFwiXHJcblxyXG5QbHVnaW5JbnN0YW5jZS5wcm90b3R5cGUubGF5b3V0ID0gYXBwbGljYXRpb25MYXlvdXRcclxuV2luZG93SW5zdGFuY2UucHJvdG90eXBlLmxheW91dCA9IGFwcGxpY2F0aW9uTGF5b3V0XHJcblxyXG5leHBvcnQge1xyXG4gIFdpbmRvd0luc3RhbmNlLFxyXG4gIFdpbmRvd0NvbXBvbmVudCxcclxuICBXaW5kb3dDb250YWluZXIsXHJcbiAgV2luZG93SUQsXHJcbiAgUGx1Z2luSW5zdGFuY2UsXHJcbiAgYXBwbGljYXRpb25MYXlvdXQsXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVMYXlvdXQoZGVzY3JpcHRpb246IE9iamVjdCk6IFBsdWdpbkNsYXNzIHtcclxuICBhcHBsaWNhdGlvbkxheW91dC5zcGxhc2hDb21wb25lbnQgPSBkZXNjcmlwdGlvbi5zcGxhc2hDb21wb25lbnRcclxuICBhcHBsaWNhdGlvbkxheW91dC5kaXNwbGF5TGF5b3V0ID0gZGVzY3JpcHRpb24uZGlzcGxheUxheW91dFxyXG4gIHJldHVybiB0aGlzXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsUGx1Z2luKGRlc2NyaXB0aW9uOiBPYmplY3QpOiBQbHVnaW5DbGFzcyB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICByZXR1cm4gYXBwbGljYXRpb25MYXlvdXQuaW5zdGFsbFBsdWdpbi5hcHBseShhcHBsaWNhdGlvbkxheW91dCwgYXJndW1lbnRzKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGV0dGFjaFdpbmRvdyh3aW5kb3dJZDogV2luZG93SUQpIHtcclxuICBhcHBsaWNhdGlvbkxheW91dC5mcmFtZSAmJiBhcHBsaWNhdGlvbkxheW91dC5mcmFtZS5kZXR0YWNoV2luZG93KHdpbmRvd0lkKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlV2luZG93KHdpbmRvd0lkOiBXaW5kb3dJRCkge1xyXG4gIGRldHRhY2hXaW5kb3cod2luZG93SWQpXHJcbiAgZGVsZXRlIGFwcGxpY2F0aW9uTGF5b3V0LndpbmRvd3Nbd2luZG93SWRdXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXaW5kb3dIYW5kbGUod2luZG93SWQ6IFdpbmRvd0lEKTogV2luZG93SW5zdGFuY2UgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgcmV0dXJuIGFwcGxpY2F0aW9uTGF5b3V0LmdldFdpbmRvd0luc3RhbmNlLmFwcGx5KGFwcGxpY2F0aW9uTGF5b3V0LCBhcmd1bWVudHMpXHJcbn1cclxuIl19